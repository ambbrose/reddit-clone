// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique

  image String?

  createdSubreddits Subreddit[] @relation("CreatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post         Post[]
  accounts     Account[]
  sessions     Session[]
  Comment      Comment[]
  CommentVote  CommentVote[]
  PostVote     PostVote[]
  Subscription Subscription[]
}

model Subreddit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId String? @db.ObjectId
  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])

  Subscription Subscription[]

  @@index([name])
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  subredditId String    @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  @@index([userId, subredditId])
}

model Post {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content Json?

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  subredditId String    @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  votes    PostVote[]

  @@index([authorId, subredditId])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  text String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String?

  votes CommentVote[]

  createdAt DateTime @default(now())

  @@index([authorId, postId, replyToId])
}

model PostVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String? @db.ObjectId
  Post   Post?   @relation(fields: [postId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  type   VoteType

  @@index([postId, userId])
}

model CommentVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  type VoteType

  @@index([userId, commentId])
}
